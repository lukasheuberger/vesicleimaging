# Description: This file contains functions for finding files, saving files

import os
import pickle

import h5py
import numpy as np
from PIL import Image


def find_files(directory, file_ext='.czi', include_keyword=None, exclude_keyword='placeholder',
               append_method='_', number_folders=0, sort=False, add_filename=False):
    """
    The find_files function takes a directory path as input and returns two lists:
        1. A list of the full file paths for all files in the directory that have a specified extension (default .czi)
        2. A list of filenames, which are generated by combining the names of parent directories

    Args:
        directory: Specify the directory in which to search for files
        file_ext: Specify the file extension of the files to be found
        include_keyword: Only include files that contain a certain keyword in the name
        exclude_keyword: Exclude files that contain a certain keyword in the name
        append_method: Specify the character that is used to separate the parent directory names
        number_folders: Specify how many parent folders to include in the filenames
        sort: Sort the filenames and filepaths alphabetically

    Returns:
        A list of file paths and a list of filenames
    """

    found_files = []
    filenames = []
    
    # Iterate through the directory and its subdirectories
    for root, _, files in os.walk(directory):
        for file in files:
            # Check if the file has the desired extension,
            # does not contain exclude keyword, and does contain include keyword
            if (
                file.endswith(file_ext)
                and not file.endswith(exclude_keyword + file_ext)
                and not (exclude_keyword in file)
                and (include_keyword is None or include_keyword in file)
            ):
                if not file.startswith("._"):
                    # Add the file path to the found_files list
                    found_files.append(os.path.join(root, file))

                    original_filename = file.split(".")[0]
                    # print(f'original_filename: {original_filename}')
    
                    if number_folders == 0:
                        # Append the filename to the filenames list
                        filenames.append(file.split(".")[0])  # remove file extension
    
                    elif number_folders == 1:
                        # Extract the names of the parent directories
                        parent1 = os.path.basename(root)
    
                        # Combine the parent directory names and append them to the filenames list
                        filenames.append(parent1)
    
                    elif number_folders == 2:
                        # Extract the names of the parent directories
                        parent1 = os.path.basename(root)
                        parent2 = os.path.basename(os.path.dirname(root))
    
                        # Combine the parent directory names and append them to the filenames list
                        filenames.append(f"{parent1}{append_method}{parent2}")
    
                    elif number_folders == 3:
                        # Extract the names of the parent directories
                        parent1 = os.path.basename(root)
                        parent2 = os.path.basename(os.path.dirname(root))
                        parent3 = os.path.basename(os.path.dirname(os.path.dirname(root)))
    
                        # Combine the parent directory names and append them to the filenames list
                        filenames.append(
                            f"{parent1}{append_method}{parent2}{append_method}{parent3}"
                        )
                    else:
                        print("Please enter a valid number of folders (0, 1, 2 or 3)")
                        break

                    if add_filename:
                        filenames[-1] = f"{filenames[-1]}_{original_filename}"
    
    if sort:
        filenames.sort()
        found_files.sort()
    
    return found_files, filenames


def get_files(path: str):
    """
    The get_files function returns a list of all the .czi files in the
    directory and sorts them by name. It also returns a list of
    just the filenames, sorted in reverse order so that they match
    up with their corresponding filepaths.

    Args:
        path:str: Specify the path to the directory containing the

    Returns:
        A list of the files in the folder and a list of the filenames
    """

    # Load the data
    os.chdir(path)
    # ic(os.listdir(path))
    # ic(os.getcwd())

    files_array = []
    filenames = []
    # r=root, d=directories, f = files
    for root, _, files in os.walk(path):
        files.sort()
        for file in files:
            if '.czi' in file or '.tif' in file:
                if not file.startswith('.'):
                    filenames.append(file)
                    file_path = os.path.join(root, file)
                    files_array.append(file_path)

    filenames.sort(reverse=True)
    files_array.sort(reverse=True)

    return files_array, filenames


def save_h5_files(data: list[int],
                  metadata: list[str],
                  add_metadata: list[str]):
    """
    The save_files function takes in a list of images, and saves them to
    hdf5 files. The function also takes in a list of metadata and
    additional metadata and saves them to a pickle file.

    Args:
        data:list[int]: Store the image data in a list
        metadata:list[str]: Store the metadata of each image in a list
        add_metadata:list[str]: Save additional metadata to the hdf5 file

    Returns:
        A list of filenames that have been saved to hdf5
    """

    # create a temporary list of filename for storing in hdf5
    filenames = []
    for image in metadata:
        filenames.append(image['Filename'])

    for index, image in enumerate(data):
        temp_filename_base = filenames[index].split('.')[0]
        temp_filename_h5 = temp_filename_base + '.h5'
        # ic(temp_filename_base)

        h5file = h5py.File(temp_filename_h5, 'w')
        h5file.create_dataset('filename', data=filenames[index])
        h5file.create_dataset('image', data=image)
        h5file.close()
        print(f'hdf5 file {temp_filename_h5} created successfully.')

        # save metadata to pickle file
        temp_filename_metadata = temp_filename_base + '_metadata.pkl'
        with open(temp_filename_metadata, 'wb') as metadata_pickle:
            pickle.dump(metadata[index], metadata_pickle)
        print(f'    - pickle file '
              f'{temp_filename_metadata} created successfully.')

        # save additional metadata to pickle file
        temp_filename_add_metadata = temp_filename_base + '_addmetadata.pkl'
        with open(temp_filename_add_metadata, 'wb') as add_metadata_pickle:
            pickle.dump(add_metadata[index], add_metadata_pickle)
        print(f'    - pickle file '
              f'{temp_filename_add_metadata} created successfully.')


def load_h5_data(path: str):
    """
    The load_h5_data function loads the data from a given path.
    It returns three lists: image_data, metadata and add_metadata.
    The image_data list contains all the images in numpy array format,
    the metadata list contains all the metadata in dictionary format
    and add_metadata is a list of dictionaries containing additional
    information about each image.

    Args:
        path:str: Specify the path to the folder containing data files

    Returns:
        A tuple of three lists
    """

    image_data = []
    metadata = []
    add_metadata = []
    filenames = []

    # ic(path)
    # ic(os.listdir(path))

    for file in os.listdir(path):
        if file.endswith(".h5"):
            filename = file.split('.')[0]
            print(f'loading {file} ...')

            h5file = h5py.File(file, 'r')
            # ic(h5file.keys())
            data = np.array(h5file.get('image'))
            image_data.append(data)
            h5file.close()

            filenames.append(filename)

    for filename in filenames:
        # if file.endswith("_metadata.pkl"):
        filename_metadata = ''.join([filename, '_metadata.pkl'])
        with open(filename_metadata, "rb") as metadata_pickle:
            meta = pickle.load(metadata_pickle)
            metadata.append(meta)

        filename_add_metadata = ''.join([filename, '_addmetadata.pkl'])
        # if file.endswith("_addmetadata.pkl"):
        with open(filename_add_metadata, "rb") as add_metadata_pickle:
            add_meta = pickle.load(add_metadata_pickle)
            add_metadata.append(add_meta)

    return image_data, metadata, add_metadata


def load_tifffile(file_path, grayscale=True):
    files_array = []
    for file in file_path:
        if file.endswith(".tif"):
            print(f'loading {file} ...')
            img = Image.open(file)
            if grayscale:
                img = img.convert('L')

            # print(f'shape: {img.shape}')
            # print(f'dtype: {img.dtype}')
            # print(f'dim: {img.ndim}')

            # Convert the image to a numpy array
            np_array = np.array(img)
            files_array.append(np_array)
    print('all images loaded successfully.')

    return files_array